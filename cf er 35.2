It's New Year's Eve soon, so Ivan decided it's high time he started setting the table. Ivan has bought two cakes and cut them into pieces:
the first cake has been cut into a pieces, and the second one — into b pieces. Ivan knows that there will be n people at the celebration
(including himself), so Ivan has set n plates for the cakes. Now he is thinking about how to distribute the cakes between the plates. 
Ivan wants to do it in such a way that all following conditions are met:
Each piece of each cake is put on some plate;
Each plate contains at least one piece of cake;
No plate contains pieces of both cakes.
To make his guests happy, Ivan wants to distribute the cakes in such a way that the minimum number of pieces on the plate is maximized.
Formally, Ivan wants to know the maximum possible number x such that he can distribute the cakes according to the aforementioned conditions,
and each plate will contain at least x pieces of cake.
Help Ivan to calculate this number x!

Input
The first line contains three integers n, a and b (1 ≤ a, b ≤ 100, 2 ≤ n ≤ a + b) — the number of plates, the number of pieces of the first
cake, and the number of pieces of the second cake, respectively.

Output
Print the maximum possible number x such that Ivan can distribute the cake in such a way that each plate will contain at least x pieces of
cake.

#include <iostream>
using namespace std;

int main() {
       int n,a,b,i,p;
       cin>>n>>a>>b;
       int t=(a+b)/n;
       int m = (a<b?a:b);
       m= (m<t?m:t);
       for(i=m;i>=1;i--)
       {
          p= (a/i)+(b/i);
          if(p>=n)
          {
                 cout<<i;
                 return 0;
          }
       }
	return 0;
}
